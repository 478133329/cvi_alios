#ifndef __CVI_MSG_H__
#define __CVI_MSG_H__

#include "cvi_comm_ipcmsg.h"

/******************************************************************************
|----------------------------------------------------------------|
| |   MOD_ID	|	DEV_ID	|   CHN_ID	|	reserve	  |is blcok|
|----------------------------------------------------------------|
|<--8bits----><--8bits --><--8bits --><-----7bits----><---1bit--->|
******************************************************************************/

#define MODFD(MOD, DevID, ChnID) \
	((CVI_U32)(((MOD & 0xFF) << 24) | ((DevID & 0xFF) << 16) | ((ChnID & 0xFF) << 8)))

#define MODFD2(MOD, DevID, ChnID, isBlock) \
	((CVI_U32)(((MOD & 0xFF) << 24) | ((DevID & 0xFF) << 16) | ((ChnID & 0xFF) << 8) | (isBlock & 0x1)))

#define GET_MOD_ID(ModFd) \
	(((ModFd) >> 24) & 0xFF)

#define GET_DEV_ID(ModFd) \
	(((ModFd) >> 16) & 0xFF)

#define GET_CHN_ID(ModFd) \
	(((ModFd) >> 8) & 0xFF)

#define IS_BLOCK(ModFd) (ModFd & 0x1)

#define CVI_IPCMSG_MEDIA_PORT (1)
#define CVI_IPCMSG_SEND_SYNC_TIMEOUT (3000)

typedef enum tagMSG_SYS_CMD_E {
	MSG_CMD_SYS_INIT = 0,
	MSG_CMD_SYS_EXIT,
	MSG_CMD_SYS_BIND,
	MSG_CMD_SYS_UNBIND,
	MSG_CMD_SYS_GET_BIND_BY_DEST,
	MSG_CMD_SYS_GET_BIND_BY_SRC,
	MSG_CMD_SYS_GET_VERSION,
	MSG_CMD_SYS_GET_CHIP_ID,
	MSG_CMD_SYS_GET_POWER_REASON,
	MSG_CMD_SYS_GET_CHIP_VERSION,
	MSG_CMD_SYS_SET_VI_VPSS_MODE,
	MSG_CMD_SYS_GET_VI_VPSS_MODE,
	MSG_CMD_SYS_SET_VPSS_MODE,
	MSG_CMD_SYS_GET_VPSS_MODE,
	MSG_CMD_SYS_SET_VPSS_MODE_EX,
	MSG_CMD_SYS_GET_VPSS_MODE_EX,
	MSG_CMD_SYS_VI_OPEN,
	MSG_CMD_SYS_VI_CLOSE,
	MSG_CMD_SYS_ALIOS_INIT,
	MSG_CMD_SYS_ALIOS_EXIT,
	MSG_CMD_SYS_FB_ON_SC
} MSG_SYS_CMD_E;

typedef enum tagMSG_VB_CMD_E {
	MSG_CMD_VB_INIT = 0,
	MSG_CMD_VB_EXIT,
	MSG_CMD_VB_SET_CONFIG,
	MSG_CMD_VB_GET_CONFIG,
	MSG_CMD_VB_CREATE_POOL,
	MSG_CMD_VB_DESTROY_POOL,
	MSG_CMD_VB_GET_BLOCK,
	MSG_CMD_VB_RELEASE_BLOCK,
	MSG_CMD_VB_PHYS_ADDR2_HANDLE,
	MSG_CMD_VB_HANDLE2_PHYS_ADDR,
	MSG_CMD_VB_HANDLE2_POOL_ID,
	MSG_CMD_VB_INQUIRE_USER_CNT,
	MSG_CMD_VB_PRINT_POOL
} MSG_VB_CMD_E;

typedef enum tagMSG_VI_CMD_E {
	MSG_CMD_VI_SET_DEV_ATTR = 0,
	MSG_CMD_VI_GET_DEV_ATTR,
	MSG_CMD_VI_GET_PIPE_STATUS,
	MSG_CMD_VI_GET_CHN_STATUS,
	MSG_CMD_VI_ENABLE_DEV,
	MSG_CMD_VI_DISABLE_DEV,
	MSG_CMD_VI_CREATE_PIPE,
	MSG_CMD_VI_DESTROY_PIPE,
	MSG_CMD_VI_SET_PIPE_ATTR,
	MSG_CMD_VI_GET_PIPE_ATTR,
	MSG_CMD_VI_START_PIPE,
	MSG_CMD_VI_STOP_PIPE,
	MSG_CMD_VI_SET_CHN_ATTR,
	MSG_CMD_VI_GET_CHN_ATTR,
	MSG_CMD_VI_ENABLE_CHN,
	MSG_CMD_VI_DISABLE_CHN,
	MSG_CMD_VI_SET_MOTION_LV,
	MSG_CMD_VI_ENABLE_DIS,
	MSG_CMD_VI_DISABLE_DIS,
	MSG_CMD_VI_SET_DIS_INFO,
	MSG_CMD_VI_SET_BYPASS_FRM,
	MSG_CMD_VI_SUSPEND,
	MSG_CMD_VI_RESUME,
	MSG_CMD_VI_GET_PIPE_FRM_SRC,
	MSG_CMD_VI_SET_PIPE_FRM_SRC,
	MSG_CMD_VI_SEND_PIPE_RAW,
	MSG_CMD_VI_SET_DEV_TIMING_ATTR,
	MSG_CMD_VI_GET_DEV_TIMING_ATTR,
	MSG_CMD_VI_GET_CHN_FRAME,
	MSG_CMD_VI_RELEASE_CHN_FRAME,
	MSG_CMD_VI_SET_CHN_CROP,
	MSG_CMD_VI_GET_CHN_CROP,
	MSG_CMD_VI_GET_PIPE_FRAME,
	MSG_CMD_VI_RELEASE_PIPE_FRAME,
	MSG_CMD_VI_START_SMOOTH_RAWDUMP,
	MSG_CMD_VI_STOP_SMOOTH_RAWDUMP,
	MSG_CMD_VI_GET_SMOOTH_RAWDUMP,
	MSG_CMD_VI_PUT_SMOOTH_RAWDUMP,
	MSG_CMD_VI_SET_CHN_ROTATION,
	MSG_CMD_VI_GET_CHN_ROTATION,
	MSG_CMD_VI_SET_CHN_LDC_ATTR,
	MSG_CMD_VI_GET_CHN_LDC_ATTR,
	MSG_CMD_VI_ATTACH_VB_POOL,
	MSG_CMD_VI_DETACH_VB_POOL,
	MSG_CMD_VI_GET_PIPE_DUMP_ATTR,
	MSG_CMD_VI_SET_PIPE_DUMP_ATTR,
	MSG_CMD_VI_DUMP_HW_REG_TO_FILE,
	MSG_CMD_VI_GET_DEV_NUM,
	MSG_CMD_VI_SET_PIPE_CROP,
	MSG_CMD_VI_GET_PIPE_CROP,
	MSG_CMD_VI_SET_CHN_FLIP_MIRROR,
	MSG_CMD_VI_GET_CHN_FLIP_MIRROR,
	MSG_CMD_VI_GET_RGBMAP_LE_BUF,
	MSG_CMD_VI_GET_RGBMAP_SE_BUF,
	MSG_CMD_VI_DBG_SET_TUNING_DIS,
} MSG_VI_CMD_E;

typedef enum tagMSG_VPSS_CMD_E {
	MSG_CMD_VPSS_CREATE = 0,
	MSG_CMD_VPSS_DESTROY,
	MSG_CMD_VPSS_GET_AVAILABLE_GRP,
	MSG_CMD_VPSS_START,
	MSG_CMD_VPSS_STOP,
	MSG_CMD_VPSS_RESET,
	MSG_CMD_VPSS_ENABLE,
	MSG_CMD_VPSS_DISABLE,
	MSG_CMD_VPSS_GET_GRP_ATTR,
	MSG_CMD_VPSS_SET_GRP_ATTR,
	MSG_CMD_VPSS_SET_CHN_ATTR,
	MSG_CMD_VPSS_GET_CHN_ATTR,
	MSG_CMD_VPSS_GET_GRP_CROP,
	MSG_CMD_VPSS_SET_GRP_CROP,
	MSG_CMD_VPSS_SEND_FRAME,
	MSG_CMD_VPSS_SEND_CHN_FRAME,
	MSG_CMD_VPSS_GET_CHN_FRAME,
	MSG_CMD_VPSS_RELEASE_CHN_FRAME,
	MSG_CMD_VPSS_SET_CHN_ROTATION,
	MSG_CMD_VPSS_GET_CHN_ROTATION,
	MSG_CMD_VPSS_SET_CHN_LDCATTR,
	MSG_CMD_VPSS_GET_CHN_LDCATTR,
	MSG_CMD_VPSS_SET_CHN_CROP,
	MSG_CMD_VPSS_GET_CHN_CROP,
	MSG_CMD_VPSS_GET_GRP_PROCAMPCTRL,
	MSG_CMD_VPSS_GET_GRP_PROCAMP,
	MSG_CMD_VPSS_GET_ALL_GRP_PROCAMP,
	MSG_CMD_VPSS_SET_GRP_PROCAMP,
	MSG_CMD_VPSS_SET_GRP_PQBIN,
	MSG_CMD_VPSS_GET_GRP_SCENE,
	MSG_CMD_VPSS_ATTACH_VBPOOL,
	MSG_CMD_VPSS_DETACH_VBPOOL,
	MSG_CMD_VPSS_TRIGGER_SNAP_FRAME,
	MSG_CMD_VPSS_SET_CHN_ALIGN,
	MSG_CMD_VPSS_GET_CHN_ALIGN,
	MSG_CMD_VPSS_SET_CHN_YRATIO,
	MSG_CMD_VPSS_GET_CHN_YRATIO,
	MSG_CMD_VPSS_SET_CHN_SCALECOEF,
	MSG_CMD_VPSS_GET_CHN_SCALECOEF,
	MSG_CMD_VPSS_SHOW_CHN,
	MSG_CMD_VPSS_HIDE_CHN,
	MSG_CMD_VPSS_GET_REGIONLUMA,
	MSG_CMD_VPSS_SET_CHN_BUFWRAPATTR,
	MSG_CMD_VPSS_GET_CHN_BUFWRAPATTR,
	MSG_CMD_VPSS_CREATE_STITCH,
	MSG_CMD_VPSS_DESTROY_STITCH,
	MSG_CMD_VPSS_SET_STITCH,
	MSG_CMD_VPSS_GET_STITCH,
	MSG_CMD_VPSS_START_STITCH,
	MSG_CMD_VPSS_STOP_STITCH,
	MSG_CMD_VPSS_SUSPEND,
	MSG_CMD_VPSS_RESUME,
} MSG_VPSS_CMD_E;

typedef enum tagMSG_VO_CMD_E {
	MSG_CMD_VO_SET_DEVATTR = 0,
	MSG_CMD_VO_GET_DEVATTR,
	MSG_CMD_VO_ENABLE_DEV,
	MSG_CMD_VO_DISABLE_DEV,
	MSG_CMD_VO_SET_PIPEATTR,
	MSG_CMD_VO_GET_PIPEATTR,

	//CHN CTRL
	MSG_CMD_VO_SET_CHNATTR,
	MSG_CMD_VO_GET_CHNATTR,
	MSG_CMD_VO_ENABLE_CHN,
	MSG_CMD_VO_DISABLE_CHN,
	MSG_CMD_VO_ENABLE,//10
	MSG_CMD_VO_DISABLE,
	MSG_CMD_VO_SHOW_CHN,
	MSG_CMD_VO_SET_DISPLAYBUFLEN,
	MSG_CMD_VO_GET_DISPLAYBUFLEN,
	MSG_CMD_VO_HIDE_CHN,
	MSG_CMD_VO_RESUME_CHN,
	MSG_CMD_VO_PAUSE_CHN,
	MSG_CMD_VO_SEND_FRAME,
	MSG_CMD_VO_SET_PUBATTR,
	MSG_CMD_VO_GET_PUBATTR,//20
	MSG_CMD_VO_GET_PANELSTATUE,
	MSG_CMD_VO_SET_VIDEOLAYERATTR,
	MSG_CMD_VO_GET_VIDEOLAYERATTR,
	MSG_CMD_VO_ENABLE_VIDEOLAYER,
	MSG_CMD_VO_DISABLE_VIDEOLAYER,
	MSG_CMD_VO_SET_CHNROTATION,
	MSG_CMD_VO_GET_CHNROTATION,
	MSG_CMD_VO_SUSPEND,
	MSG_CMD_VO_RESUME,
	MSG_CMD_VO_CLEAR_CHNBUF,
	MSG_CMD_VO_GAMMA_LUT_UPDATE,
	MSG_CMD_VO_GAMMA_LUT_READ,
	MSG_CMD_VO_DEV_IS_ENABLE,
	MSG_CMD_VO_GET_CTX,
} MSG_VO_CMD_E;

typedef enum tagMSG_GDC_CMD_E {
	MSG_CMD_GDC_BEGAIN_JOB = 0,
	MSG_CMD_GDC_END_JOB,
	MSG_CMD_GDC_CANCEL_JOB,
	MSG_CMD_GDC_ADD_ROT_TASK,
	MSG_CMD_GDC_ADD_LDC_TASK,
	MSG_CMD_GDC_SET_BUF_WRAP,
	MSG_CMD_GDC_GET_BUF_WRAP,
	MSG_CMD_GDC_SUSPEND,
	MSG_CMD_GDC_RESUME,
} MSG_GDC_CMD_E;

typedef enum tagMSG_VENC_CMD_E {
	MSG_CMD_VENC_CREATE_CHN = 0,
	MSG_CMD_VENC_DESTROY_CHN,
	MSG_CMD_VENC_RESET_CHN,
	MSG_CMD_VENC_START_RECV_FRAME,
	MSG_CMD_VENC_STOP_RECV_FRAME,
	MSG_CMD_VENC_QUERY_STATUS,
	MSG_CMD_VENC_SET_CHN_ATTR,
	MSG_CMD_VENC_GET_CHN_ATTR,
	MSG_CMD_VENC_GET_STREAM,
	MSG_CMD_VENC_RELEASE_STREAM,
	MSG_CMD_VENC_SEND_FRAME,
	MSG_CMD_VENC_REQUEST_IDR,
	MSG_CMD_VENC_SET_ROI_ATTR,
	MSG_CMD_VENC_GET_ROI_ATTR,
	MSG_CMD_VENC_SET_H264_TRANS,
	MSG_CMD_VENC_GET_H264_TRANS,
	MSG_CMD_VENC_SET_H264_ENTROPY,
	MSG_CMD_VENC_GET_H264_ENTROPY,
	MSG_CMD_VENC_SET_JPEG_PARAM,
	MSG_CMD_VENC_GET_JPEG_PARAM,
	MSG_CMD_VENC_SET_RC_PARAM,
	MSG_CMD_VENC_GET_RC_PARAM,
	MSG_CMD_VENC_SET_REF_PARAM,
	MSG_CMD_VENC_GET_REF_PARAM,
	MSG_CMD_VENC_SET_CHN_PARAM,
	MSG_CMD_VENC_GET_CHN_PARAM,
	MSG_CMD_VENC_SET_MOD_PARAM,
	MSG_CMD_VENC_GET_MOD_PARAM,
	MSG_CMD_VENC_SET_FRAME_LOST,
	MSG_CMD_VENC_GET_FRAME_LOST,
	MSG_CMD_VENC_ATTACH_VBPOOL,
	MSG_CMD_VENC_DETACH_VBPOOL,
	MSG_CMD_VENC_SET_H264VUI,
	MSG_CMD_VENC_GET_H264VUI,
	MSG_CMD_VENC_SET_H265VUI,
	MSG_CMD_VENC_GET_H265VUI,
	MSG_CMD_VENC_GET_FIRMWARE_STRATEGY,
	MSG_CMD_VENC_SUSPEND,
	MSG_CMD_VENC_RESUME,
} MSG_VENC_CMD_E;

typedef enum tagMSG_VDEC_CMD_E {
	MSG_CMD_VDEC_CREATE_CHN = 0,
	MSG_CMD_VDEC_DESTROY_CHN,
	MSG_CMD_VDEC_SET_CHN_ATTR,
	MSG_CMD_VDEC_GET_CHN_ATTR,
	MSG_CMD_VDEC_START_RECV_FRAME,
	MSG_CMD_VDEC_STOP_RECV_FRAME,
	MSG_CMD_VDEC_RESET_CHN,
	MSG_CMD_VDEC_SET_CHN_PARAM,
	MSG_CMD_VDEC_GET_CHN_PARAM,
	MSG_CMD_VDEC_SEND_STREAM,
	MSG_CMD_VDEC_GET_FRAME,
	MSG_CMD_VDEC_RELEASE_FRAME,
	MSG_CMD_VDEC_ATTACH_VBPOOL,
	MSG_CMD_VDEC_DETACH_VBPOOL,
	MSG_CMD_VDEC_SET_MOD_PARAM,
	MSG_CMD_VDEC_GET_MOD_PARAM,
	MSG_CMD_VDEC_QUERY_STATUS,
	MSG_CMD_VDEC_ION_ALLOC,
	MSG_CMD_VDEC_ION_FREE,
	MSG_CMD_VDEC_GET_FIRMWARE_STRATEGY,
	MSG_CMD_VDEC_SUSPEND,
	MSG_CMD_VDEC_RESUME,
} MSG_DEC_CMD_E;

typedef enum tagMSG_ISP_CMD_E {
	MSG_CMD_ISP_SENSOR_INIT,
	MSG_CMD_ISP_SENSOR_EXIT,
	MSG_CMD_ISP_INIT,
	MSG_CMD_ISP_EXIT,
	MSG_CMD_ISP_SET_FMW_STATE,
	MSG_CMD_ISP_GET_FMW_STATE,
	MSG_CMD_ISP_GET_VD_TIMEOUT,
	MSG_CMD_ISP_SET_SMART_INFO,
	MSG_CMD_ISP_GET_SMART_INFO,
	MSG_CMD_ISP_GET_ION_INFO,
	MSG_CMD_ISP_AE_GET_BUF_SIZE,
	MSG_CMD_ISP_AE_GET_BUF,
	MSG_CMD_ISP_AE_SET_RAW_DUMP_FID,
	MSG_CMD_ISP_AE_GET_RAW_REPLAY_EXP_BUF,
	MSG_CMD_ISP_AE_SET_RAW_REPLAY_MODE,
	MSG_CMD_ISP_AE_SET_RAW_REPLAY_EXPOSURE,
	MSG_CMD_ISP_AE_GET_RAW_REPLAY_FRM_NUM,
	MSG_CMD_ISP_AE_GET_BIN_SIZE,
	MSG_CMD_ISP_AE_GET_BIN_BUF,
	MSG_CMD_ISP_AE_GET_FRAME_ID,
	MSG_CMD_ISP_AE_GET_FPS,
	MSG_CMD_ISP_AE_GET_LVX100,
	MSG_CMD_ISP_AE_SET_FASTBOOT_EXPOSURE,
	MSG_CMD_ISP_AE_SET_SIM_MODE,
	MSG_CMD_ISP_AWB_GET_LOG_BUF,
	MSG_CMD_ISP_AWB_GET_BIN_SIZE,
	MSG_CMD_ISP_AWB_GET_BIN_BUF,
	MSG_CMD_ISP_AWB_SET_SIM_MODE,
	MSG_CMD_ISP_AWB_GET_RUN_STATUS,
	MSG_CMD_ISP_AWB_SET_RUN_STATUS,
	MSG_CMD_ISP_MEDIA_VIDEO_INIT,
	MSG_CMD_ISP_MEDIA_VIDEO_DEINIT,
	MSG_CMD_ISP_SET_BYPASS_FRM,
	MSG_CMD_ISP_GET_BYPASS_FRM,
} MSG_ISP_CMD_E;

typedef enum tagMSG_RGN_CMD_E {
	MSG_CMD_RGN_CREATE = 0,
	MSG_CMD_RGN_DESTROY,
	MSG_CMD_RGN_GET_ATTR,
	MSG_CMD_RGN_SET_ATTR,
	MSG_CMD_RGN_SET_BITMAP,
	MSG_CMD_RGN_ATTACH_TO_CHN,
	MSG_CMD_RGN_DETACH_FROM_CHN,
	MSG_CMD_RGN_SET_DISP_ATTR,
	MSG_CMD_RGN_GET_DISP_ATTR,
	MSG_CMD_RGN_GET_CANVAS_INFO,
	MSG_CMD_RGN_UPDATE_CANVAS,
	MSG_CMD_RGN_INVERT_COLOR,
	MSG_CMD_RGN_SET_CHN_PALETTE,
	MSG_CMD_RGN_GET_CTX,
} MSG_RGN_CMD_E;

typedef enum tagMSG_AUDIO_CMD_E {
	MSG_CMD_AUDIO_AI_OPEN = 0,
	MSG_CMD_AUDIO_AO_OPEN,
	MSG_CMD_AUDIO_AI_CLOSE,
	MSG_CMD_AUDIO_AO_CLOSE,
	MSG_CMD_AUDIO_SET_VOL,
	MSG_CMD_AUDIO_GET_VOL,
	MSG_CMD_AUDIO_SET_MUTE,
	MSG_CMD_AUDIO_GET_MUTE,
} MSG_AUDIO_CMD_E;

typedef enum tagMSG_SENSOR_CMD_E {
	MSG_CMD_SENSOR_AHD = 0,
	MSG_CMD_SENSOR_GET_STATUS,
	MSG_CMD_SENSOR_SET_TYPE,
	MSG_CMD_SENSOR_SET_RX_ATTR,
	MSG_CMD_SENSOR_SET_SNS_I2C,
	MSG_CMD_SENSOR_SET_ISP_INIT,
	MSG_CMD_SENSOR_ISP_REG_CB,
	MSG_CMD_SENSOR_ISP_UNREG_CB,
	MSG_CMD_SENSOR_SET_IMG_MODE,
	MSG_CMD_SENSOR_SET_WDR_MODE,
	MSG_CMD_SENSOR_GET_RX_ATTR,
	MSG_CMD_SENSOR_SET_SNS_PROBE,
	MSG_CMD_SENSOR_SET_GPIO_INIT,
	MSG_CMD_SENSOR_RESET_GPIO,
	MSG_CMD_SENSOR_RESET_MIPI,
	MSG_CMD_SENSOR_SET_MIPI_ATTR,
	MSG_CMD_SENSOR_EN_SNS_CLK,
	MSG_CMD_SENSOR_SET_SNS_STANDBY,
	MSG_CMD_SENSOR_SET_SNS_INIT,
	MSG_CMD_SENSOR_SET_FLIPMIRROR_CB,
	MSG_CMD_SENSOR_GET_AE_DEFAULT,
	MSG_CMD_SENSOR_GET_BLK_LEVEL,
	MSG_CMD_SENSOR_SET_SNS_FPS,
	MSG_CMD_SENSOR_GET_EXP_RAT,
	MSG_CMD_SENSOR_SET_DGAIN_CALC,
	MSG_CMD_SENSOR_SET_AGAIN_CALC,
} MSG_SENSOR_CMD_E;

typedef enum tagMSG_MIPI_TX_CMD_E {
	MSG_CMD_MIPI_TX_SET_DEV_CFG = 0,
	MSG_CMD_MIPI_TX_SET_CMD,
	MSG_CMD_MIPI_TX_GET_CMD,
	MSG_CMD_MIPI_TX_ENABLE,
	MSG_CMD_MIPI_TX_DISABLE,
	MSG_CMD_MIPI_TX_SET_HS_SETTLE,
	MSG_CMD_MIPI_TX_GET_HS_SETTLE,
	MSG_CMD_MIPI_TX_BUFF
} MSG_MIPI_TX_CMD_E;

#endif
